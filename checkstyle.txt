Starting audit...
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\BlackElf.java:8:5: Class 'BlackElf' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BlackElf' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\BlackElf.java:13:60: '30' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\BlackElf.java:13:65: '100' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\Command.java:3:8: Unused import - fileio.Child. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\Command.java:6:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\Elf.java:4:5: Class 'Elf' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Elf' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\Elf.java:4:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\Elf.java:4:25: Parameter command should be final. [FinalParameters]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\PinkElf.java:8:5: Class 'PinkElf' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PinkElf' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\PinkElf.java:13:60: '30' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\PinkElf.java:13:65: '100' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\elves\YellowElf.java:10:5: Class 'YellowElf' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'YellowElf' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:3:8: Unused import - com.fasterxml.jackson.annotation.JsonIgnore. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:55:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:56:57: '100' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:57:28: '10.0' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:58:28: '10.0' is a magic number. [MagicNumber]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:160:25: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:161:28: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:162:50: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:163:52: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:164:34: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:165:32: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:166:58: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:167:50: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:168:54: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:169:32: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:170:58: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:171:54: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\Child.java:172:52: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:3:8: Unused import - com.fasterxml.jackson.annotation.JsonIgnore. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:65:29: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:66:54: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:67:36: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:68:42: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\fileio\InputGift.java:69:42: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:3:8: Unused import - com.fasterxml.jackson.databind.JsonSerializable. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:10:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:13:5: Class 'DistriburionByNiceScoreCity' looks like designed for extension (can be subclassed), but the method 'formCitiesMap' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistriburionByNiceScoreCity' final or making the method 'formCitiesMap' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:13:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:25:5: Class 'DistriburionByNiceScoreCity' looks like designed for extension (can be subclassed), but the method 'getCitiesAverageScores' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistriburionByNiceScoreCity' final or making the method 'getCitiesAverageScores' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:25:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:40:5: Class 'DistriburionByNiceScoreCity' looks like designed for extension (can be subclassed), but the method 'mySort' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistriburionByNiceScoreCity' final or making the method 'mySort' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:40:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:55:5: Class 'DistriburionByNiceScoreCity' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistriburionByNiceScoreCity' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:86:37: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistriburionByNiceScoreCity.java:90: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionById.java:3:8: Unused import - command.Command. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionById.java:10:8: Unused import - java.util.HashMap. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionById.java:40:29: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionByNiceScore.java:13:5: Class 'DistributionByNiceScore' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'DistributionByNiceScore' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionByNiceScore.java:19:13: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\DistributionByNiceScore.java:40:29: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\GiftCommand.java:13:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\Gifter.java:4:5: Class 'Gifter' looks like designed for extension (can be subclassed), but the method 'execute' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gifter' final or making the method 'execute' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\Gifter.java:4:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\gifting\Gifter.java:4:25: Parameter giftCommand should be final. [FinalParameters]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:3:8: Unused import - com.fasterxml.jackson.annotation.JsonIgnore. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:6:8: Unused import - enums.ElvesType. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:8:8: Unused import - fileio.InputGift. [UnusedImports]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:35:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:39:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:43:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:47:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:51:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:55:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:59:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:63:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:67:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:71:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:75:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getNiceScoreHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getNiceScoreHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:79:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setNiceScoreHistory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setNiceScoreHistory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:83:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getAssignedBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getAssignedBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:87:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setAssignedBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setAssignedBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:91:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'getReceivedGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'getReceivedGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:95:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setReceivedGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setReceivedGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:99:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:103:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:107:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputChild.java:111:5: Class 'OutputChild' looks like designed for extension (can be subclassed), but the method 'setCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputChild' final or making the method 'setCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:18:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'getProductName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'getProductName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:22:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:26:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:30:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'setProductName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'setProductName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:34:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'setPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'setPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\Anul2\POO\Proiect - SantaIsComming\SantaIsComming-Etapa1\.\src\writer\OutputGift.java:38:5: Class 'OutputGift' looks like designed for extension (can be subclassed), but the method 'setCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'OutputGift' final or making the method 'setCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
Audit done.
Checkstyle ends with 86 errors.
